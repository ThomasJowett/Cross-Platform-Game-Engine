# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

RESCOMP = windres
INCLUDES += -Isrc -I../Engine/src -I../Engine/vendor
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef
define POSTBUILDCMDS
endef

ifeq ($(config),debug)
TARGETDIR = ../bin/Debug-linux/ExampleGame
TARGET = $(TARGETDIR)/ExampleGame
OBJDIR = ../bin-int/Debug-linux/ExampleGame
DEFINES += -DDEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -g
LIBS += ../bin/Debug-linux/Engine/libEngine.a ../Engine/vendor/GLFW/bin/Debug-linux/GLFW/libGLFW.a ../Engine/vendor/GLAD/bin/Debug-linux/GLAD/libGLAD.a ../Engine/vendor/imgui/bin/Debug-linux/ImGui/libImGui.a -lXrandr -lXi -lGLEW -lGLU -lGL -lX11 -ldl -lpTread -lstdc++fs
LDDEPS += ../bin/Debug-linux/Engine/libEngine.a ../Engine/vendor/GLFW/bin/Debug-linux/GLFW/libGLFW.a ../Engine/vendor/GLAD/bin/Debug-linux/GLAD/libGLAD.a ../Engine/vendor/imgui/bin/Debug-linux/ImGui/libImGui.a
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64

else ifeq ($(config),release)
TARGETDIR = ../bin/Release-linux/ExampleGame
TARGET = $(TARGETDIR)/ExampleGame
OBJDIR = ../bin-int/Release-linux/ExampleGame
DEFINES += -DRELEASE
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O2
LIBS += ../bin/Release-linux/Engine/libEngine.a ../Engine/vendor/GLFW/bin/Release-linux/GLFW/libGLFW.a ../Engine/vendor/GLAD/bin/Release-linux/GLAD/libGLAD.a ../Engine/vendor/imgui/bin/Release-linux/ImGui/libImGui.a -lXrandr -lXi -lGLEW -lGLU -lGL -lX11 -ldl -lpTread -lstdc++fs
LDDEPS += ../bin/Release-linux/Engine/libEngine.a ../Engine/vendor/GLFW/bin/Release-linux/GLFW/libGLFW.a ../Engine/vendor/GLAD/bin/Release-linux/GLAD/libGLAD.a ../Engine/vendor/imgui/bin/Release-linux/ImGui/libImGui.a
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -s

else ifeq ($(config),distribution)
TARGETDIR = ../bin/Distribution-linux/ExampleGame
TARGET = $(TARGETDIR)/ExampleGame
OBJDIR = ../bin-int/Distribution-linux/ExampleGame
DEFINES += -DDIST
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O2
LIBS += ../bin/Distribution-linux/Engine/libEngine.a ../Engine/vendor/GLFW/bin/Distribution-linux/GLFW/libGLFW.a ../Engine/vendor/GLAD/bin/Distribution-linux/GLAD/libGLAD.a ../Engine/vendor/imgui/bin/Distribution-linux/ImGui/libImGui.a -lXrandr -lXi -lGLEW -lGLU -lGL -lX11 -ldl -lpTread -lstdc++fs
LDDEPS += ../bin/Distribution-linux/Engine/libEngine.a ../Engine/vendor/GLFW/bin/Distribution-linux/GLFW/libGLFW.a ../Engine/vendor/GLAD/bin/Distribution-linux/GLAD/libGLAD.a ../Engine/vendor/imgui/bin/Distribution-linux/ImGui/libImGui.a
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64 -s

else
  $(error "invalid configuration $(config)")
endif

# Per File Configurations
# #############################################


# File sets
# #############################################

OBJECTS :=

OBJECTS += $(OBJDIR)/ExampleApp.o
OBJECTS += $(OBJDIR)/ExampleLayer2D.o
OBJECTS += $(OBJDIR)/ExampleLayer3D.o
OBJECTS += $(OBJDIR)/GridLayer.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking ExampleGame
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning ExampleGame
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/ExampleApp.o: src/ExampleApp.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ExampleLayer2D.o: src/ExampleLayer2D.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/ExampleLayer3D.o: src/ExampleLayer3D.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/GridLayer.o: src/GridLayer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif